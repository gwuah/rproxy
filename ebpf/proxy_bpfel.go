// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package proxy

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadProxy returns the embedded CollectionSpec for proxy.
func loadProxy() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProxyBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load proxy: %w", err)
	}

	return spec, err
}

// loadProxyObjects loads proxy and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *proxyObjects
//     *proxyPrograms
//     *proxyMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProxyObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProxy()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// proxySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type proxySpecs struct {
	proxyProgramSpecs
	proxyMapSpecs
}

// proxySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type proxyProgramSpecs struct {
	ReverseProxy *ebpf.ProgramSpec `ebpf:"reverse_proxy"`
}

// proxyMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type proxyMapSpecs struct {
	Ports *ebpf.MapSpec `ebpf:"ports"`
}

// proxyObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type proxyObjects struct {
	proxyPrograms
	proxyMaps
}

func (o *proxyObjects) Close() error {
	return _ProxyClose(
		&o.proxyPrograms,
		&o.proxyMaps,
	)
}

// proxyMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type proxyMaps struct {
	Ports *ebpf.Map `ebpf:"ports"`
}

func (m *proxyMaps) Close() error {
	return _ProxyClose(
		m.Ports,
	)
}

// proxyPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type proxyPrograms struct {
	ReverseProxy *ebpf.Program `ebpf:"reverse_proxy"`
}

func (p *proxyPrograms) Close() error {
	return _ProxyClose(
		p.ReverseProxy,
	)
}

func _ProxyClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed proxy_bpfel.o
var _ProxyBytes []byte
